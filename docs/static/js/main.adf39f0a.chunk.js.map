{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","newcategory","setNewcategory","className","value","type","name","onChange","$event","target","onClick","trim","length","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oMAoCeA,EAjCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KASA,OACI,qBAAKC,UAAU,kBAAf,SACI,oCACI,yDACA,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,cAAf,SACA,uBAAQC,MAAOH,EAAaI,KAAK,OAAOC,KAAK,cAAcC,SAAU,SAACC,GAAD,OAAYN,EAAeM,EAAOC,OAAOL,YAE9G,qBAAKD,UAAU,eAAf,SACA,wBAAQA,UAAU,eAAeO,QAAS,WAjBxC,IAACN,KAiBuDH,GAhB5DU,OAAOC,OAAS,IAEtBb,EAAYK,GACZF,EAAe,MAaP,+B,8BCrBPW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACK,KACdC,EAHa,2DAG8CC,UAFlD,oCADI,kBAEC,KAFD,cAG0FH,GAH1F,SAKII,MAAMF,GALV,cAKbG,EALa,gBAMIA,EAASC,OANb,uBAMXC,EANW,EAMXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YACxB,CACGC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAcZM,GAdY,4CAAH,sDCoBLO,EAlBC,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKb,UAAU,yCAAf,UACI,qBAAKA,UAAU,cAAf,SACI,4BAAIuB,MAER,qBAAKvB,UAAU,iBAAf,SAAgC,qBAAK2B,IAAKd,EAAKe,IAAKL,UCmBjDM,EAvBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEf,ECFwB,SAACA,GACzB,MAA0Bd,mBAAS,CAACqB,KAAM,GACtCY,SAAS,IADb,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OARAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAM,SAAAC,GACpBC,YAAW,WACPJ,EAAS,CAAEd,KAAMiB,EAAML,SAAS,MACjC,UAER,CAACnB,IAEGoB,EDV2BM,CAAa1B,GAAjCa,EAAd,EAAQN,KAAcY,EAAtB,EAAsBA,QACtB,OACI,qCACI,8CAAiBnB,KAEZmB,GAAW,mBAAG9B,UAAU,mCAAb,wBAHpB,OAIQ,qBAAKA,UAAU,aAAf,SAEIwB,EAAOJ,KAAI,SAACC,GACR,OAAQ,cAAC,EAAD,eAA2BA,GAAbA,EAAIC,aEWnCgB,EAxBM,WAIjB,MAAgCzC,mBAAS,eAAzC,mBAAOc,EAAP,KAAiBf,EAAjB,KAEA,OACI,gCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,8BAGa,cAAC,EAAD,CAAwBe,SAAUA,GAApBA,SCdvC4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.adf39f0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategory }) => {\n    const [newcategory, setNewcategory] = useState('');\n    const handleAdd = (value) => {\n        if (value.trim().length > 2) {\n            // setCategories((categories) => [...categories, value]);\n            setCategory(value);\n            setNewcategory('');\n        }\n    }\n\n    return (\n        <div className=\"searchContainer\">\n            <details>\n                <summary >Search by category</summary>\n                <div className=\"searchForm\">\n                    <div className=\"inputSearch\">\n                    <input  value={newcategory} type=\"text\" name=\"newcategory\" onChange={($event) => setNewcategory($event.target.value)} ></input>\n                    </div>\n                    <div className=\"buttonSearch\">\n                    <button className=\"buttonSearch\" onClick={() => handleAdd(newcategory)}>Search</button>\n                    </div>\n                    \n\n                </div>\n            </details>\n        </div>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\nexport const getGifs = async (category) => {\n    const apiKey = 'h9TddSeya32DAbPCNhSJbvQ50xqfR32p';\n    const searchLimit = '10';\n    const url = `https://api.giphy.com/v1/stickers/search?api_key=${ encodeURI(apiKey)}&limit=${searchLimit}&q=${category}`;\n\n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map(img =>\n    ({\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n\n    }));\n    return gifs;\n};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GifItem = ({id, title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <div className=\"card-header\">\n                <p>{title}</p>\n            </div>\n            <div className=\"card-container\"><img src={url} alt={title}></img></div>\n        </div>\n        \n        \n    )\n}\n\nGifItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string\n}\n\nexport default GifItem\n","import React from 'react';\nimport { useFetchGifs } from './../hooks/useFetchGifs';\nimport PropTypes from 'prop-types';\nimport GifItem from './GifItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h4>Results for {category}</h4>\n           \n                {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}Â \n                <div className=\"categories\">\n                { (\n                    images.map((img) => {\n                        return (<GifItem key={img.id}  {...img} />)\n                    })\n                )}\n\n            </div>\n        </>)\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid;\n","\nimport { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({data: [], \n        loading: true});\n\n    useEffect(() => {      \n        getGifs(category).then( imgs=>  {\n            setTimeout(() => {\n                setState({ data: imgs, loading: false})\n            }, 3000);\n        });\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid';\nconst GifExpertApp = () => {\n\n\n    //const [categories, setCategories] = useState(['Dragon Ball']);\n    const [category, setCategory] = useState('Dragon Ball');\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategory={setCategory} />\n            <hr/>\n            <div>\n                {/* {\n                    categories.map((category) => */\n                        (<GifGrid key={category} category={category} />)\n                  //  {/* ) */}\n                }\n\n            </div>\n        </div>\n    )\n}\n\nexport default GifExpertApp;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport React from 'react'\nimport GifExpertApp from './GifExpertApp'\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}